/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IVerifier {
  export type ModelStruct = {
    name: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    owner: PromiseOrValue<string>;
  };

  export type ModelStructOutput = [string, string, string] & {
    name: string;
    description: string;
    owner: string;
  };

  export type ModelCommitmentStruct = {
    commitment: PromiseOrValue<BytesLike>;
    name: PromiseOrValue<string>;
  };

  export type ModelCommitmentStructOutput = [string, string] & {
    commitment: string;
    name: string;
  };

  export type MerkleProofStruct = {
    leaf: PromiseOrValue<BytesLike>;
    proof: PromiseOrValue<BytesLike>[];
  };

  export type MerkleProofStructOutput = [string, string[]] & {
    leaf: string;
    proof: string[];
  };

  export type ZkpStruct = {
    a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
    b: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ];
    c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
    input: PromiseOrValue<BigNumberish>[];
  };

  export type ZkpStructOutput = [
    [BigNumber, BigNumber],
    [[BigNumber, BigNumber], [BigNumber, BigNumber]],
    [BigNumber, BigNumber],
    BigNumber[]
  ] & {
    a: [BigNumber, BigNumber];
    b: [[BigNumber, BigNumber], [BigNumber, BigNumber]];
    c: [BigNumber, BigNumber];
    input: BigNumber[];
  };

  export type ZkpWithValidityStruct = {
    zkp: IVerifier.ZkpStruct;
    isValid: PromiseOrValue<boolean>;
  };

  export type ZkpWithValidityStructOutput = [
    IVerifier.ZkpStructOutput,
    boolean
  ] & { zkp: IVerifier.ZkpStructOutput; isValid: boolean };
}

export interface IVerifierInterface extends utils.Interface {
  functions: {
    "commit(bytes32,bytes32,bytes32)": FunctionFragment;
    "getModelInfo(bytes32)": FunctionFragment;
    "getModels(address,uint32,uint32)": FunctionFragment;
    "registerModel(bytes32,string,string)": FunctionFragment;
    "reveal(uint256,(bytes32,bytes32[])[])": FunctionFragment;
    "verify(uint256,(uint256[2],uint256[2][2],uint256[2],uint256[16])[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "commit"
      | "getModelInfo"
      | "getModels"
      | "registerModel"
      | "reveal"
      | "verify"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "commit",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getModelInfo",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getModels",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerModel",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reveal",
    values: [PromiseOrValue<BigNumberish>, IVerifier.MerkleProofStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [PromiseOrValue<BigNumberish>, IVerifier.ZkpStruct[]]
  ): string;

  decodeFunctionResult(functionFragment: "commit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getModelInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getModels", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reveal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {};
}

export interface IVerifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVerifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    commit(
      commitmentModel: PromiseOrValue<BytesLike>,
      commitmentData: PromiseOrValue<BytesLike>,
      commitmentResults: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getModelInfo(
      modelCommitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [IVerifier.ModelStructOutput] & { modelInfo: IVerifier.ModelStructOutput }
    >;

    getModels(
      ownerAddress: PromiseOrValue<string>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IVerifier.ModelCommitmentStructOutput[]] & {
        modelCommitments: IVerifier.ModelCommitmentStructOutput[];
      }
    >;

    registerModel(
      modelCommitment: PromiseOrValue<BytesLike>,
      modelName: PromiseOrValue<string>,
      modelDescription: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reveal(
      commitmentId: PromiseOrValue<BigNumberish>,
      merkleProofs: IVerifier.MerkleProofStruct[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { verifiedNodes: string[] }>;

    verify(
      commitmentId: PromiseOrValue<BigNumberish>,
      zkps: IVerifier.ZkpStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  commit(
    commitmentModel: PromiseOrValue<BytesLike>,
    commitmentData: PromiseOrValue<BytesLike>,
    commitmentResults: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getModelInfo(
    modelCommitment: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IVerifier.ModelStructOutput>;

  getModels(
    ownerAddress: PromiseOrValue<string>,
    offset: PromiseOrValue<BigNumberish>,
    limit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IVerifier.ModelCommitmentStructOutput[]>;

  registerModel(
    modelCommitment: PromiseOrValue<BytesLike>,
    modelName: PromiseOrValue<string>,
    modelDescription: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reveal(
    commitmentId: PromiseOrValue<BigNumberish>,
    merkleProofs: IVerifier.MerkleProofStruct[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  verify(
    commitmentId: PromiseOrValue<BigNumberish>,
    zkps: IVerifier.ZkpStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    commit(
      commitmentModel: PromiseOrValue<BytesLike>,
      commitmentData: PromiseOrValue<BytesLike>,
      commitmentResults: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { commitmentId: BigNumber; challenge: string }
    >;

    getModelInfo(
      modelCommitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IVerifier.ModelStructOutput>;

    getModels(
      ownerAddress: PromiseOrValue<string>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IVerifier.ModelCommitmentStructOutput[]>;

    registerModel(
      modelCommitment: PromiseOrValue<BytesLike>,
      modelName: PromiseOrValue<string>,
      modelDescription: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IVerifier.ModelStructOutput>;

    reveal(
      commitmentId: PromiseOrValue<BigNumberish>,
      merkleProofs: IVerifier.MerkleProofStruct[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    verify(
      commitmentId: PromiseOrValue<BigNumberish>,
      zkps: IVerifier.ZkpStruct[],
      overrides?: CallOverrides
    ): Promise<IVerifier.ZkpWithValidityStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    commit(
      commitmentModel: PromiseOrValue<BytesLike>,
      commitmentData: PromiseOrValue<BytesLike>,
      commitmentResults: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getModelInfo(
      modelCommitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getModels(
      ownerAddress: PromiseOrValue<string>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerModel(
      modelCommitment: PromiseOrValue<BytesLike>,
      modelName: PromiseOrValue<string>,
      modelDescription: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reveal(
      commitmentId: PromiseOrValue<BigNumberish>,
      merkleProofs: IVerifier.MerkleProofStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verify(
      commitmentId: PromiseOrValue<BigNumberish>,
      zkps: IVerifier.ZkpStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    commit(
      commitmentModel: PromiseOrValue<BytesLike>,
      commitmentData: PromiseOrValue<BytesLike>,
      commitmentResults: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getModelInfo(
      modelCommitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getModels(
      ownerAddress: PromiseOrValue<string>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerModel(
      modelCommitment: PromiseOrValue<BytesLike>,
      modelName: PromiseOrValue<string>,
      modelDescription: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reveal(
      commitmentId: PromiseOrValue<BigNumberish>,
      merkleProofs: IVerifier.MerkleProofStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify(
      commitmentId: PromiseOrValue<BigNumberish>,
      zkps: IVerifier.ZkpStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
