/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace ICustomVerifier {
  export type CommitmentStruct = {
    id: PromiseOrValue<BytesLike>;
    modelContentId: PromiseOrValue<BytesLike>;
    merkleRoot: PromiseOrValue<BytesLike>;
    challenge: PromiseOrValue<BytesLike>;
    difficulty: PromiseOrValue<BigNumberish>;
    proverAddress: PromiseOrValue<string>;
    isRevealed: PromiseOrValue<boolean>;
  };

  export type CommitmentStructOutput = [
    string,
    string,
    string,
    string,
    number,
    string,
    boolean
  ] & {
    id: string;
    modelContentId: string;
    merkleRoot: string;
    challenge: string;
    difficulty: number;
    proverAddress: string;
    isRevealed: boolean;
  };

  export type ModelStruct = {
    contentId: PromiseOrValue<BytesLike>;
    name: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    ownerAddress: PromiseOrValue<string>;
    isDisabled: PromiseOrValue<boolean>;
  };

  export type ModelStructOutput = [string, string, string, string, boolean] & {
    contentId: string;
    name: string;
    description: string;
    ownerAddress: string;
    isDisabled: boolean;
  };

  export type ZkpStruct = {
    a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
    b: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ];
    c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
    input: [PromiseOrValue<BigNumberish>];
  };

  export type ZkpStructOutput = [
    [BigNumber, BigNumber],
    [[BigNumber, BigNumber], [BigNumber, BigNumber]],
    [BigNumber, BigNumber],
    [BigNumber]
  ] & {
    a: [BigNumber, BigNumber];
    b: [[BigNumber, BigNumber], [BigNumber, BigNumber]];
    c: [BigNumber, BigNumber];
    input: [BigNumber];
  };
}

export interface ICustomVerifierInterface extends utils.Interface {
  functions: {
    "commit(bytes32)": FunctionFragment;
    "disableModel()": FunctionFragment;
    "getCommitment(bytes32)": FunctionFragment;
    "getCommitmentsOfModel(uint32,uint32)": FunctionFragment;
    "getCommitmentsOfProver(uint32,uint32)": FunctionFragment;
    "getDifficulty()": FunctionFragment;
    "getModel()": FunctionFragment;
    "registerModel(bytes32,string,string,address)": FunctionFragment;
    "updateChallenge(bytes32)": FunctionFragment;
    "updateDifficulty(uint8)": FunctionFragment;
    "updateModel(string,string)": FunctionFragment;
    "verify(bytes32,bytes32[],bool[],bytes32[],(uint256[2],uint256[2][2],uint256[2],uint256[1])[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "commit"
      | "disableModel"
      | "getCommitment"
      | "getCommitmentsOfModel"
      | "getCommitmentsOfProver"
      | "getDifficulty"
      | "getModel"
      | "registerModel"
      | "updateChallenge"
      | "updateDifficulty"
      | "updateModel"
      | "verify"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "commit",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "disableModel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCommitment",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommitmentsOfModel",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommitmentsOfProver",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDifficulty",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getModel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerModel",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateChallenge",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDifficulty",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateModel",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<boolean>[],
      PromiseOrValue<BytesLike>[],
      ICustomVerifier.ZkpStruct[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "commit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommitmentsOfModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommitmentsOfProver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDifficulty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getModel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDifficulty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {};
}

export interface ICustomVerifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICustomVerifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    commit(
      _merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disableModel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCommitment(
      _commitmentId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[ICustomVerifier.CommitmentStructOutput]>;

    getCommitmentsOfModel(
      _offset: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getCommitmentsOfProver(
      _offset: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getDifficulty(overrides?: CallOverrides): Promise<[number]>;

    getModel(
      overrides?: CallOverrides
    ): Promise<[ICustomVerifier.ModelStructOutput]>;

    registerModel(
      _modelContentId: PromiseOrValue<BytesLike>,
      _modelName: PromiseOrValue<string>,
      _modelDescription: PromiseOrValue<string>,
      _modelOwnerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateChallenge(
      _commitmentId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDifficulty(
      _difficulty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateModel(
      _modelName: PromiseOrValue<string>,
      _modelDescription: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verify(
      _commitmentId: PromiseOrValue<BytesLike>,
      _merkleProofs: PromiseOrValue<BytesLike>[],
      _proofFlags: PromiseOrValue<boolean>[],
      _leaves: PromiseOrValue<BytesLike>[],
      _zkps: ICustomVerifier.ZkpStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  commit(
    _merkleRoot: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disableModel(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCommitment(
    _commitmentId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<ICustomVerifier.CommitmentStructOutput>;

  getCommitmentsOfModel(
    _offset: PromiseOrValue<BigNumberish>,
    _limit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getCommitmentsOfProver(
    _offset: PromiseOrValue<BigNumberish>,
    _limit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getDifficulty(overrides?: CallOverrides): Promise<number>;

  getModel(
    overrides?: CallOverrides
  ): Promise<ICustomVerifier.ModelStructOutput>;

  registerModel(
    _modelContentId: PromiseOrValue<BytesLike>,
    _modelName: PromiseOrValue<string>,
    _modelDescription: PromiseOrValue<string>,
    _modelOwnerAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateChallenge(
    _commitmentId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDifficulty(
    _difficulty: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateModel(
    _modelName: PromiseOrValue<string>,
    _modelDescription: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verify(
    _commitmentId: PromiseOrValue<BytesLike>,
    _merkleProofs: PromiseOrValue<BytesLike>[],
    _proofFlags: PromiseOrValue<boolean>[],
    _leaves: PromiseOrValue<BytesLike>[],
    _zkps: ICustomVerifier.ZkpStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    commit(
      _merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    disableModel(overrides?: CallOverrides): Promise<void>;

    getCommitment(
      _commitmentId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<ICustomVerifier.CommitmentStructOutput>;

    getCommitmentsOfModel(
      _offset: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getCommitmentsOfProver(
      _offset: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getDifficulty(overrides?: CallOverrides): Promise<number>;

    getModel(
      overrides?: CallOverrides
    ): Promise<ICustomVerifier.ModelStructOutput>;

    registerModel(
      _modelContentId: PromiseOrValue<BytesLike>,
      _modelName: PromiseOrValue<string>,
      _modelDescription: PromiseOrValue<string>,
      _modelOwnerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateChallenge(
      _commitmentId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDifficulty(
      _difficulty: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateModel(
      _modelName: PromiseOrValue<string>,
      _modelDescription: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    verify(
      _commitmentId: PromiseOrValue<BytesLike>,
      _merkleProofs: PromiseOrValue<BytesLike>[],
      _proofFlags: PromiseOrValue<boolean>[],
      _leaves: PromiseOrValue<BytesLike>[],
      _zkps: ICustomVerifier.ZkpStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    commit(
      _merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disableModel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCommitment(
      _commitmentId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCommitmentsOfModel(
      _offset: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCommitmentsOfProver(
      _offset: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDifficulty(overrides?: CallOverrides): Promise<BigNumber>;

    getModel(overrides?: CallOverrides): Promise<BigNumber>;

    registerModel(
      _modelContentId: PromiseOrValue<BytesLike>,
      _modelName: PromiseOrValue<string>,
      _modelDescription: PromiseOrValue<string>,
      _modelOwnerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateChallenge(
      _commitmentId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDifficulty(
      _difficulty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateModel(
      _modelName: PromiseOrValue<string>,
      _modelDescription: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verify(
      _commitmentId: PromiseOrValue<BytesLike>,
      _merkleProofs: PromiseOrValue<BytesLike>[],
      _proofFlags: PromiseOrValue<boolean>[],
      _leaves: PromiseOrValue<BytesLike>[],
      _zkps: ICustomVerifier.ZkpStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    commit(
      _merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disableModel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCommitment(
      _commitmentId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCommitmentsOfModel(
      _offset: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCommitmentsOfProver(
      _offset: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDifficulty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getModel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerModel(
      _modelContentId: PromiseOrValue<BytesLike>,
      _modelName: PromiseOrValue<string>,
      _modelDescription: PromiseOrValue<string>,
      _modelOwnerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateChallenge(
      _commitmentId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDifficulty(
      _difficulty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateModel(
      _modelName: PromiseOrValue<string>,
      _modelDescription: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verify(
      _commitmentId: PromiseOrValue<BytesLike>,
      _merkleProofs: PromiseOrValue<BytesLike>[],
      _proofFlags: PromiseOrValue<boolean>[],
      _leaves: PromiseOrValue<BytesLike>[],
      _zkps: ICustomVerifier.ZkpStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
