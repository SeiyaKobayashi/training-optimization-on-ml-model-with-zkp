/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestVerifier,
  TestVerifierInterface,
} from "../../../contracts/src/TestVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_contractAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "IVerifier.Hash",
        name: "_modelContentId",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "_modelName",
        type: "string",
      },
      {
        internalType: "string",
        name: "_modelDescription",
        type: "string",
      },
    ],
    name: "_registerModel",
    outputs: [
      {
        components: [
          {
            internalType: "IVerifier.Hash",
            name: "contentId",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
          {
            internalType: "address",
            name: "ownerAddress",
            type: "address",
          },
          {
            internalType: "bool",
            name: "isDisabled",
            type: "bool",
          },
        ],
        internalType: "struct IVerifier.Model",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516108ed3803806108ed833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b6107d6806101176000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806388cba26f14610030575b600080fd5b61004a60048036038101906100459190610215565b610060565b6040516100579190610434565b60405180910390f35b61006861011c565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c46bfb1f87878787876040518663ffffffff1660e01b81526004016100c99594939291906104b2565b6000604051808303816000875af11580156100e8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906101119190610757565b905095945050505050565b6040518060a00160405280600080191681526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61018d8161017a565b811461019857600080fd5b50565b6000813590506101aa81610184565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126101d5576101d46101b0565b5b8235905067ffffffffffffffff8111156101f2576101f16101b5565b5b60208301915083600182028301111561020e5761020d6101ba565b5b9250929050565b60008060008060006060868803121561023157610230610170565b5b600061023f8882890161019b565b955050602086013567ffffffffffffffff8111156102605761025f610175565b5b61026c888289016101bf565b9450945050604086013567ffffffffffffffff81111561028f5761028e610175565b5b61029b888289016101bf565b92509250509295509295909350565b60006102b58261017a565b9050919050565b6102c5816102aa565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156103055780820151818401526020810190506102ea565b60008484015250505050565b6000601f19601f8301169050919050565b600061032d826102cb565b61033781856102d6565b93506103478185602086016102e7565b61035081610311565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103868261035b565b9050919050565b6103968161037b565b82525050565b60008115159050919050565b6103b18161039c565b82525050565b600060a0830160008301516103cf60008601826102bc565b50602083015184820360208601526103e78282610322565b915050604083015184820360408601526104018282610322565b9150506060830151610416606086018261038d565b50608083015161042960808601826103a8565b508091505092915050565b6000602082019050818103600083015261044e81846103b7565b905092915050565b61045f816102aa565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b60006104918385610465565b935061049e838584610476565b6104a783610311565b840190509392505050565b60006060820190506104c76000830188610456565b81810360208301526104da818688610485565b905081810360408301526104ef818486610485565b90509695505050505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61053882610311565b810181811067ffffffffffffffff8211171561055757610556610500565b5b80604052505050565b600061056a610166565b9050610576828261052f565b919050565b600080fd5b60008151905061058f81610184565b92915050565b600080fd5b600067ffffffffffffffff8211156105b5576105b4610500565b5b6105be82610311565b9050602081019050919050565b60006105de6105d98461059a565b610560565b9050828152602081018484840111156105fa576105f9610595565b5b6106058482856102e7565b509392505050565b600082601f830112610622576106216101b0565b5b81516106328482602086016105cb565b91505092915050565b6106448161037b565b811461064f57600080fd5b50565b6000815190506106618161063b565b92915050565b6106708161039c565b811461067b57600080fd5b50565b60008151905061068d81610667565b92915050565b600060a082840312156106a9576106a86104fb565b5b6106b360a0610560565b905060006106c384828501610580565b600083015250602082015167ffffffffffffffff8111156106e7576106e661057b565b5b6106f38482850161060d565b602083015250604082015167ffffffffffffffff8111156107175761071661057b565b5b6107238482850161060d565b604083015250606061073784828501610652565b606083015250608061074b8482850161067e565b60808301525092915050565b60006020828403121561076d5761076c610170565b5b600082015167ffffffffffffffff81111561078b5761078a610175565b5b61079784828501610693565b9150509291505056fea26469706673582212203b8af87ea2d2ac03362a2dbdf3000b42958ea69c1c07667f2fc38eb41c11e20264736f6c63430008110033";

type TestVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestVerifier__factory extends ContractFactory {
  constructor(...args: TestVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestVerifier> {
    return super.deploy(
      _contractAddress,
      overrides || {}
    ) as Promise<TestVerifier>;
  }
  override getDeployTransaction(
    _contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_contractAddress, overrides || {});
  }
  override attach(address: string): TestVerifier {
    return super.attach(address) as TestVerifier;
  }
  override connect(signer: Signer): TestVerifier__factory {
    return super.connect(signer) as TestVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestVerifierInterface {
    return new utils.Interface(_abi) as TestVerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestVerifier {
    return new Contract(address, _abi, signerOrProvider) as TestVerifier;
  }
}
