/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Bytes,
  BytesInterface,
} from "../../../../contracts/src/libraries/Bytes";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_hash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_n",
        type: "uint256",
      },
    ],
    name: "getLastNBits",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6103b0610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063b109c1021461003a575b600080fd5b610054600480360381019061004f9190610103565b61006a565b6040516100619190610152565b60405180910390f35b600081600261007991906102cf565b8360001c6100879190610349565b60001b905092915050565b600080fd5b6000819050919050565b6100aa81610097565b81146100b557600080fd5b50565b6000813590506100c7816100a1565b92915050565b6000819050919050565b6100e0816100cd565b81146100eb57600080fd5b50565b6000813590506100fd816100d7565b92915050565b6000806040838503121561011a57610119610092565b5b6000610128858286016100b8565b9250506020610139858286016100ee565b9150509250929050565b61014c81610097565b82525050565b60006020820190506101676000830184610143565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156101f3578086048111156101cf576101ce61016d565b5b60018516156101de5780820291505b80810290506101ec8561019c565b94506101b3565b94509492505050565b60008261020c57600190506102c8565b8161021a57600090506102c8565b8160018114610230576002811461023a57610269565b60019150506102c8565b60ff84111561024c5761024b61016d565b5b8360020a9150848211156102635761026261016d565b5b506102c8565b5060208310610133831016604e8410600b841016171561029e5782820a9050838111156102995761029861016d565b5b6102c8565b6102ab84848460016101a9565b925090508184048111156102c2576102c161016d565b5b81810290505b9392505050565b60006102da826100cd565b91506102e5836100cd565b92506103127fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846101fc565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610354826100cd565b915061035f836100cd565b92508261036f5761036e61031a565b5b82820690509291505056fea26469706673582212205f57ab8a42959adbb0b0a0cf6c16900b5298e63e86ba99c460dcda75abc8327064736f6c63430008110033";

type BytesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BytesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Bytes__factory extends ContractFactory {
  constructor(...args: BytesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Bytes> {
    return super.deploy(overrides || {}) as Promise<Bytes>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Bytes {
    return super.attach(address) as Bytes;
  }
  override connect(signer: Signer): Bytes__factory {
    return super.connect(signer) as Bytes__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BytesInterface {
    return new utils.Interface(_abi) as BytesInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Bytes {
    return new Contract(address, _abi, signerOrProvider) as Bytes;
  }
}
